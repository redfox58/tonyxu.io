<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Thinking In Java on testing browwwwwww</title><link>https://blog.my-google.eu.org/books/thinking-in-java/</link><description>Recent content in Thinking In Java on testing browwwwwww</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Fri, 24 May 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.my-google.eu.org/books/thinking-in-java/index.xml" rel="self" type="application/rss+xml"/><item><title>Chapter 3 - Controlling Execution</title><link>https://blog.my-google.eu.org/books/thinking-in-java/chapter-3/</link><pubDate>Fri, 24 May 2019 00:00:00 +0000</pubDate><guid>https://blog.my-google.eu.org/books/thinking-in-java/chapter-3/</guid><description>Control statements:
if-else while do-while for return break true and false All conditional statements use truth or falsehood of a conditional expression to determine the execution path.
Number can&amp;rsquo;t be used as boolean, alternative way: if (a!=0)
if-else Two forms of using if:
if(Boolean-expression) statement or
if(Boolean-express) statement else statement Iteration Iteration statements (looping):
while do-while for while while(Boolean-expression) statement do-while do statement while(Boolean-expression) for for(initialization; Boolean-expression; step) statement The comma operator Using the comma operator, you can define multiple variables within a for statement, but they must be of the same type.</description></item><item><title>Chapter 2 - Everything Is an Object</title><link>https://blog.my-google.eu.org/books/thinking-in-java/chapter-2/</link><pubDate>Sun, 31 Mar 2019 00:00:00 +0000</pubDate><guid>https://blog.my-google.eu.org/books/thinking-in-java/chapter-2/</guid><description>The Java language assumes that you want to do only object-oriented programming, so (almost) everything in Java is an object.
You manipulate objects with references You treat everything as an object, using a single consistent syntax. Although you treat everything as an object, the identifier you manipulate is actually a &amp;ldquo;reference&amp;rdquo; to an object.
For example:
String s; You must create all the objects When you create a reference, you want to connect it with a new object.</description></item><item><title>Chapter 1 - Introduction to Objects</title><link>https://blog.my-google.eu.org/books/thinking-in-java/chapter-1/</link><pubDate>Sun, 24 Mar 2019 00:00:00 +0000</pubDate><guid>https://blog.my-google.eu.org/books/thinking-in-java/chapter-1/</guid><description>The progress of abstraction Five basic characteristics of object-oriented programming:
Everything is an object. A program is a bunch of objects telling each other what to do by sending messages. Each object has its own memory made up of other objects. Every object has a type All objects of a particular type can receive the same messages. An object has an interface The interface determines what request you can make for a particular object.</description></item></channel></rss>